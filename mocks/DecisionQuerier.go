// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	decisionQuerier "github.com/kazmerdome/muzz/internal/module/decision/decision-querier"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// DecisionQuerier is an autogenerated mock type for the Querier type
type DecisionQuerier struct {
	mock.Mock
}

type DecisionQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *DecisionQuerier) EXPECT() *DecisionQuerier_Expecter {
	return &DecisionQuerier_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, arg
func (_m *DecisionQuerier) Count(ctx context.Context, arg decisionQuerier.CountParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, decisionQuerier.CountParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, decisionQuerier.CountParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, decisionQuerier.CountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecisionQuerier_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type DecisionQuerier_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
//   - arg decisionQuerier.CountParams
func (_e *DecisionQuerier_Expecter) Count(ctx interface{}, arg interface{}) *DecisionQuerier_Count_Call {
	return &DecisionQuerier_Count_Call{Call: _e.mock.On("Count", ctx, arg)}
}

func (_c *DecisionQuerier_Count_Call) Run(run func(ctx context.Context, arg decisionQuerier.CountParams)) *DecisionQuerier_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(decisionQuerier.CountParams))
	})
	return _c
}

func (_c *DecisionQuerier_Count_Call) Return(_a0 int64, _a1 error) *DecisionQuerier_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DecisionQuerier_Count_Call) RunAndReturn(run func(context.Context, decisionQuerier.CountParams) (int64, error)) *DecisionQuerier_Count_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneByActorUserId provides a mock function with given fields: ctx, actorUserID
func (_m *DecisionQuerier) GetOneByActorUserId(ctx context.Context, actorUserID uuid.UUID) (decisionQuerier.Decision, error) {
	ret := _m.Called(ctx, actorUserID)

	if len(ret) == 0 {
		panic("no return value specified for GetOneByActorUserId")
	}

	var r0 decisionQuerier.Decision
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (decisionQuerier.Decision, error)); ok {
		return rf(ctx, actorUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) decisionQuerier.Decision); ok {
		r0 = rf(ctx, actorUserID)
	} else {
		r0 = ret.Get(0).(decisionQuerier.Decision)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, actorUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecisionQuerier_GetOneByActorUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneByActorUserId'
type DecisionQuerier_GetOneByActorUserId_Call struct {
	*mock.Call
}

// GetOneByActorUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - actorUserID uuid.UUID
func (_e *DecisionQuerier_Expecter) GetOneByActorUserId(ctx interface{}, actorUserID interface{}) *DecisionQuerier_GetOneByActorUserId_Call {
	return &DecisionQuerier_GetOneByActorUserId_Call{Call: _e.mock.On("GetOneByActorUserId", ctx, actorUserID)}
}

func (_c *DecisionQuerier_GetOneByActorUserId_Call) Run(run func(ctx context.Context, actorUserID uuid.UUID)) *DecisionQuerier_GetOneByActorUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *DecisionQuerier_GetOneByActorUserId_Call) Return(_a0 decisionQuerier.Decision, _a1 error) *DecisionQuerier_GetOneByActorUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DecisionQuerier_GetOneByActorUserId_Call) RunAndReturn(run func(context.Context, uuid.UUID) (decisionQuerier.Decision, error)) *DecisionQuerier_GetOneByActorUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOneByRecipientUserID provides a mock function with given fields: ctx, recipientUserID
func (_m *DecisionQuerier) GetOneByRecipientUserID(ctx context.Context, recipientUserID uuid.UUID) (decisionQuerier.Decision, error) {
	ret := _m.Called(ctx, recipientUserID)

	if len(ret) == 0 {
		panic("no return value specified for GetOneByRecipientUserID")
	}

	var r0 decisionQuerier.Decision
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (decisionQuerier.Decision, error)); ok {
		return rf(ctx, recipientUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) decisionQuerier.Decision); ok {
		r0 = rf(ctx, recipientUserID)
	} else {
		r0 = ret.Get(0).(decisionQuerier.Decision)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, recipientUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecisionQuerier_GetOneByRecipientUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneByRecipientUserID'
type DecisionQuerier_GetOneByRecipientUserID_Call struct {
	*mock.Call
}

// GetOneByRecipientUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientUserID uuid.UUID
func (_e *DecisionQuerier_Expecter) GetOneByRecipientUserID(ctx interface{}, recipientUserID interface{}) *DecisionQuerier_GetOneByRecipientUserID_Call {
	return &DecisionQuerier_GetOneByRecipientUserID_Call{Call: _e.mock.On("GetOneByRecipientUserID", ctx, recipientUserID)}
}

func (_c *DecisionQuerier_GetOneByRecipientUserID_Call) Run(run func(ctx context.Context, recipientUserID uuid.UUID)) *DecisionQuerier_GetOneByRecipientUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *DecisionQuerier_GetOneByRecipientUserID_Call) Return(_a0 decisionQuerier.Decision, _a1 error) *DecisionQuerier_GetOneByRecipientUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DecisionQuerier_GetOneByRecipientUserID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (decisionQuerier.Decision, error)) *DecisionQuerier_GetOneByRecipientUserID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, arg
func (_m *DecisionQuerier) List(ctx context.Context, arg decisionQuerier.ListParams) ([]decisionQuerier.Decision, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []decisionQuerier.Decision
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, decisionQuerier.ListParams) ([]decisionQuerier.Decision, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, decisionQuerier.ListParams) []decisionQuerier.Decision); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]decisionQuerier.Decision)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, decisionQuerier.ListParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecisionQuerier_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type DecisionQuerier_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - arg decisionQuerier.ListParams
func (_e *DecisionQuerier_Expecter) List(ctx interface{}, arg interface{}) *DecisionQuerier_List_Call {
	return &DecisionQuerier_List_Call{Call: _e.mock.On("List", ctx, arg)}
}

func (_c *DecisionQuerier_List_Call) Run(run func(ctx context.Context, arg decisionQuerier.ListParams)) *DecisionQuerier_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(decisionQuerier.ListParams))
	})
	return _c
}

func (_c *DecisionQuerier_List_Call) Return(_a0 []decisionQuerier.Decision, _a1 error) *DecisionQuerier_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DecisionQuerier_List_Call) RunAndReturn(run func(context.Context, decisionQuerier.ListParams) ([]decisionQuerier.Decision, error)) *DecisionQuerier_List_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertOne provides a mock function with given fields: ctx, arg
func (_m *DecisionQuerier) UpsertOne(ctx context.Context, arg decisionQuerier.UpsertOneParams) (decisionQuerier.Decision, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpsertOne")
	}

	var r0 decisionQuerier.Decision
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, decisionQuerier.UpsertOneParams) (decisionQuerier.Decision, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, decisionQuerier.UpsertOneParams) decisionQuerier.Decision); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(decisionQuerier.Decision)
	}

	if rf, ok := ret.Get(1).(func(context.Context, decisionQuerier.UpsertOneParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecisionQuerier_UpsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertOne'
type DecisionQuerier_UpsertOne_Call struct {
	*mock.Call
}

// UpsertOne is a helper method to define mock.On call
//   - ctx context.Context
//   - arg decisionQuerier.UpsertOneParams
func (_e *DecisionQuerier_Expecter) UpsertOne(ctx interface{}, arg interface{}) *DecisionQuerier_UpsertOne_Call {
	return &DecisionQuerier_UpsertOne_Call{Call: _e.mock.On("UpsertOne", ctx, arg)}
}

func (_c *DecisionQuerier_UpsertOne_Call) Run(run func(ctx context.Context, arg decisionQuerier.UpsertOneParams)) *DecisionQuerier_UpsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(decisionQuerier.UpsertOneParams))
	})
	return _c
}

func (_c *DecisionQuerier_UpsertOne_Call) Return(_a0 decisionQuerier.Decision, _a1 error) *DecisionQuerier_UpsertOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DecisionQuerier_UpsertOne_Call) RunAndReturn(run func(context.Context, decisionQuerier.UpsertOneParams) (decisionQuerier.Decision, error)) *DecisionQuerier_UpsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewDecisionQuerier creates a new instance of DecisionQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDecisionQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *DecisionQuerier {
	mock := &DecisionQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
