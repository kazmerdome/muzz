// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	explore "github.com/kazmerdome/muzz/internal/module/explore"
	mock "github.com/stretchr/testify/mock"
)

// ExploreService is an autogenerated mock type for the ExploreService type
type ExploreService struct {
	mock.Mock
}

type ExploreService_Expecter struct {
	mock *mock.Mock
}

func (_m *ExploreService) EXPECT() *ExploreService_Expecter {
	return &ExploreService_Expecter{mock: &_m.Mock}
}

// CountLikedYou provides a mock function with given fields: ctx, req
func (_m *ExploreService) CountLikedYou(ctx context.Context, req explore.CountLikedYouRequest) (*explore.CountLikedYouResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CountLikedYou")
	}

	var r0 *explore.CountLikedYouResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, explore.CountLikedYouRequest) (*explore.CountLikedYouResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, explore.CountLikedYouRequest) *explore.CountLikedYouResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*explore.CountLikedYouResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, explore.CountLikedYouRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExploreService_CountLikedYou_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountLikedYou'
type ExploreService_CountLikedYou_Call struct {
	*mock.Call
}

// CountLikedYou is a helper method to define mock.On call
//   - ctx context.Context
//   - req explore.CountLikedYouRequest
func (_e *ExploreService_Expecter) CountLikedYou(ctx interface{}, req interface{}) *ExploreService_CountLikedYou_Call {
	return &ExploreService_CountLikedYou_Call{Call: _e.mock.On("CountLikedYou", ctx, req)}
}

func (_c *ExploreService_CountLikedYou_Call) Run(run func(ctx context.Context, req explore.CountLikedYouRequest)) *ExploreService_CountLikedYou_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(explore.CountLikedYouRequest))
	})
	return _c
}

func (_c *ExploreService_CountLikedYou_Call) Return(_a0 *explore.CountLikedYouResponse, _a1 error) *ExploreService_CountLikedYou_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExploreService_CountLikedYou_Call) RunAndReturn(run func(context.Context, explore.CountLikedYouRequest) (*explore.CountLikedYouResponse, error)) *ExploreService_CountLikedYou_Call {
	_c.Call.Return(run)
	return _c
}

// ListLikedYou provides a mock function with given fields: ctx, req
func (_m *ExploreService) ListLikedYou(ctx context.Context, req explore.ListLikedYouRequest) (*explore.ListLikedYouResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListLikedYou")
	}

	var r0 *explore.ListLikedYouResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, explore.ListLikedYouRequest) (*explore.ListLikedYouResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, explore.ListLikedYouRequest) *explore.ListLikedYouResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*explore.ListLikedYouResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, explore.ListLikedYouRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExploreService_ListLikedYou_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLikedYou'
type ExploreService_ListLikedYou_Call struct {
	*mock.Call
}

// ListLikedYou is a helper method to define mock.On call
//   - ctx context.Context
//   - req explore.ListLikedYouRequest
func (_e *ExploreService_Expecter) ListLikedYou(ctx interface{}, req interface{}) *ExploreService_ListLikedYou_Call {
	return &ExploreService_ListLikedYou_Call{Call: _e.mock.On("ListLikedYou", ctx, req)}
}

func (_c *ExploreService_ListLikedYou_Call) Run(run func(ctx context.Context, req explore.ListLikedYouRequest)) *ExploreService_ListLikedYou_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(explore.ListLikedYouRequest))
	})
	return _c
}

func (_c *ExploreService_ListLikedYou_Call) Return(_a0 *explore.ListLikedYouResponse, _a1 error) *ExploreService_ListLikedYou_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExploreService_ListLikedYou_Call) RunAndReturn(run func(context.Context, explore.ListLikedYouRequest) (*explore.ListLikedYouResponse, error)) *ExploreService_ListLikedYou_Call {
	_c.Call.Return(run)
	return _c
}

// ListNewLikedYou provides a mock function with given fields: ctx, req
func (_m *ExploreService) ListNewLikedYou(ctx context.Context, req explore.ListLikedYouRequest) (*explore.ListLikedYouResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListNewLikedYou")
	}

	var r0 *explore.ListLikedYouResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, explore.ListLikedYouRequest) (*explore.ListLikedYouResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, explore.ListLikedYouRequest) *explore.ListLikedYouResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*explore.ListLikedYouResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, explore.ListLikedYouRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExploreService_ListNewLikedYou_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNewLikedYou'
type ExploreService_ListNewLikedYou_Call struct {
	*mock.Call
}

// ListNewLikedYou is a helper method to define mock.On call
//   - ctx context.Context
//   - req explore.ListLikedYouRequest
func (_e *ExploreService_Expecter) ListNewLikedYou(ctx interface{}, req interface{}) *ExploreService_ListNewLikedYou_Call {
	return &ExploreService_ListNewLikedYou_Call{Call: _e.mock.On("ListNewLikedYou", ctx, req)}
}

func (_c *ExploreService_ListNewLikedYou_Call) Run(run func(ctx context.Context, req explore.ListLikedYouRequest)) *ExploreService_ListNewLikedYou_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(explore.ListLikedYouRequest))
	})
	return _c
}

func (_c *ExploreService_ListNewLikedYou_Call) Return(_a0 *explore.ListLikedYouResponse, _a1 error) *ExploreService_ListNewLikedYou_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExploreService_ListNewLikedYou_Call) RunAndReturn(run func(context.Context, explore.ListLikedYouRequest) (*explore.ListLikedYouResponse, error)) *ExploreService_ListNewLikedYou_Call {
	_c.Call.Return(run)
	return _c
}

// PutDecision provides a mock function with given fields: ctx, req
func (_m *ExploreService) PutDecision(ctx context.Context, req explore.PutDecisionRequest) (*explore.PutDecisionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PutDecision")
	}

	var r0 *explore.PutDecisionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, explore.PutDecisionRequest) (*explore.PutDecisionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, explore.PutDecisionRequest) *explore.PutDecisionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*explore.PutDecisionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, explore.PutDecisionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExploreService_PutDecision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDecision'
type ExploreService_PutDecision_Call struct {
	*mock.Call
}

// PutDecision is a helper method to define mock.On call
//   - ctx context.Context
//   - req explore.PutDecisionRequest
func (_e *ExploreService_Expecter) PutDecision(ctx interface{}, req interface{}) *ExploreService_PutDecision_Call {
	return &ExploreService_PutDecision_Call{Call: _e.mock.On("PutDecision", ctx, req)}
}

func (_c *ExploreService_PutDecision_Call) Run(run func(ctx context.Context, req explore.PutDecisionRequest)) *ExploreService_PutDecision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(explore.PutDecisionRequest))
	})
	return _c
}

func (_c *ExploreService_PutDecision_Call) Return(_a0 *explore.PutDecisionResponse, _a1 error) *ExploreService_PutDecision_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExploreService_PutDecision_Call) RunAndReturn(run func(context.Context, explore.PutDecisionRequest) (*explore.PutDecisionResponse, error)) *ExploreService_PutDecision_Call {
	_c.Call.Return(run)
	return _c
}

// NewExploreService creates a new instance of ExploreService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExploreService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExploreService {
	mock := &ExploreService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
